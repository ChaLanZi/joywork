// Code generated by goctl. DO NOT EDIT!
// Source: account.proto

//go:generate mockgen -destination ./accountservice_mock.go -package accountservice -source $GOFILE

package accountservice

import (
	"context"

	account "account/rpc/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AccountService interface {
		List(ctx context.Context, in *GetAccountListRequest) (*AccountList, error)
		Get(ctx context.Context, in *GetAccountRequest) (*Account, error)
		Create(ctx context.Context, in *CreateAccountRequest) (*Account, error)
		Update(ctx context.Context, in *Account) (*Account, error)
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest) (*AccountEmpty, error)
		RequestPasswordReset(ctx context.Context, in *PasswordResetRequest) (*AccountEmpty, error)
		RequestEmailChange(ctx context.Context, in *EmailChangeRequest) (*AccountEmpty, error)
		VerifyPassword(ctx context.Context, in *VerifyPasswordRequest) (*Account, error)
		ChangeEmail(ctx context.Context, in *EmailComfirmation) (*AccountEmpty, error)
		GetOrCreate(ctx context.Context, in *GetOrCreateRequest) (*Account, error)
		GetAccountByPhoneNumber(ctx context.Context, in *GetAccountByPhoneNumberRequest) (*Account, error)
		GetAccountByEmail(ctx context.Context, in *GetAccountByEmailRequest) (*Account, error)
		TrackEvent(ctx context.Context, in *TrackEventReqeust) (*AccountEmpty, error)
		SyncUser(ctx context.Context, in *SyncUserRequest) (*AccountEmpty, error)
	}

	defaultAccountService struct {
		cli zrpc.Client
	}
)

func NewAccountService(cli zrpc.Client) AccountService {
	return &defaultAccountService{
		cli: cli,
	}
}

func (m *defaultAccountService) List(ctx context.Context, in *GetAccountListRequest) (*AccountList, error) {
	var request account.GetAccountListRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.List(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountList
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) Get(ctx context.Context, in *GetAccountRequest) (*Account, error) {
	var request account.GetAccountRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.Get(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) Create(ctx context.Context, in *CreateAccountRequest) (*Account, error) {
	var request account.CreateAccountRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.Create(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) Update(ctx context.Context, in *Account) (*Account, error) {
	var request account.Account
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.Update(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest) (*AccountEmpty, error) {
	var request account.UpdatePasswordRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.UpdatePassword(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) RequestPasswordReset(ctx context.Context, in *PasswordResetRequest) (*AccountEmpty, error) {
	var request account.PasswordResetRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.RequestPasswordReset(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) RequestEmailChange(ctx context.Context, in *EmailChangeRequest) (*AccountEmpty, error) {
	var request account.EmailChangeRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.RequestEmailChange(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest) (*Account, error) {
	var request account.VerifyPasswordRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.VerifyPassword(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) ChangeEmail(ctx context.Context, in *EmailComfirmation) (*AccountEmpty, error) {
	var request account.EmailComfirmation
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.ChangeEmail(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) GetOrCreate(ctx context.Context, in *GetOrCreateRequest) (*Account, error) {
	var request account.GetOrCreateRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.GetOrCreate(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) GetAccountByPhoneNumber(ctx context.Context, in *GetAccountByPhoneNumberRequest) (*Account, error) {
	var request account.GetAccountByPhoneNumberRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.GetAccountByPhoneNumber(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) GetAccountByEmail(ctx context.Context, in *GetAccountByEmailRequest) (*Account, error) {
	var request account.GetAccountByEmailRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.GetAccountByEmail(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret Account
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) TrackEvent(ctx context.Context, in *TrackEventReqeust) (*AccountEmpty, error) {
	var request account.TrackEventReqeust
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.TrackEvent(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultAccountService) SyncUser(ctx context.Context, in *SyncUserRequest) (*AccountEmpty, error) {
	var request account.SyncUserRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := account.NewAccountServiceClient(m.cli.Conn())
	resp, err := client.SyncUser(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AccountEmpty
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
